name: Deploy to DigitalOcean

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint

      - name: Run tests
        run: npm test

      - name: Build application
        run: npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Deploy to DigitalOcean App Platform
        run: |
          # List all apps for debugging
          echo "Listing all apps:"
          doctl apps list --format ID,Name --no-header || true
          
          # Try to get app ID - check both lectio-api and just lectio
          APP_ID=$(doctl apps list --format ID,Name --no-header | grep -i "lectio" | head -1 | awk '{print $1}' || true)
          
          if [ -z "$APP_ID" ]; then
            echo "App doesn't exist, creating new app..."
            # Try to create, if it fails with 409, get the existing app ID
            if ! doctl apps create --spec app.yaml --wait; then
              echo "App creation failed, checking if it already exists..."
              # List apps again to see what's there
              echo "Current apps after create attempt:"
              doctl apps list --format ID,Name --no-header
              
              # Try broader search patterns
              APP_ID=$(doctl apps list --format ID,Name --no-header | grep -i "lectio" | head -1 | awk '{print $1}')
              if [ -z "$APP_ID" ]; then
                # If still not found, try without grep
                APP_ID=$(doctl apps list --format ID --no-header | head -1)
              fi
              
              if [ -n "$APP_ID" ]; then
                echo "Found existing app with ID: $APP_ID"
              else
                echo "Failed to create or find app"
                exit 1
              fi
            fi
          else
            echo "Found existing app with ID: $APP_ID"
          fi
          
          # Now we definitely have an app, update it
          if [ -n "$APP_ID" ]; then
            echo "Updating app with ID: $APP_ID"
            doctl apps update $APP_ID --spec app.yaml
            doctl apps create-deployment $APP_ID --wait
          fi

      - name: Get app URL
        id: app-url
        run: |
          # Use the same logic to find the app
          APP_ID=$(doctl apps list --format ID,Name --no-header | grep -i "lectio" | head -1 | awk '{print $1}')
          if [ -z "$APP_ID" ]; then
            APP_ID=$(doctl apps list --format ID --no-header | head -1)
          fi
          
          if [ -n "$APP_ID" ]; then
            APP_URL=$(doctl apps get $APP_ID --format DefaultIngress --no-header)
            echo "url=https://$APP_URL" >> $GITHUB_OUTPUT
            echo "App deployed to: https://$APP_URL"
          else
            echo "Could not find app to get URL"
            exit 1
          fi

      - name: Validate deployment
        run: |
          sleep 60  # Wait for app to stabilize
          curl -f ${{ steps.app-url.outputs.url }}/health || exit 1
          echo "Health check passed!"