name: MCP Server Tests

on:
  push:
    branches: [ main, develop, 'feature/mcp-*' ]
    paths:
      - 'mcp-server/**'
      - '.github/workflows/mcp-test.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'mcp-server/**'
      - '.github/workflows/mcp-test.yml'

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: lectionary_api_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: |
          package-lock.json
          mcp-server/package-lock.json
    
    - name: Install API dependencies
      run: npm ci
    
    - name: Install MCP Server dependencies
      working-directory: ./mcp-server
      run: npm ci
    
    - name: Build API
      run: npm run build
      env:
        NODE_ENV: test
    
    - name: Build MCP Server
      working-directory: ./mcp-server
      run: npm run build
    
    - name: Run database migrations
      run: npm run migration:run
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/lectionary_api_test
        NODE_ENV: test
    
    - name: Seed test database
      run: npm run seed
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/lectionary_api_test
        NODE_ENV: test
    
    - name: Start API server
      run: |
        npm start &
        sleep 10
        curl --fail http://localhost:3000/health || exit 1
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/lectionary_api_test
        NODE_ENV: test
        PORT: 3000
    
    - name: Start MCP server
      working-directory: ./mcp-server
      run: |
        MCP_TRANSPORT=http PORT=3001 npm start &
        sleep 5
        curl --fail http://localhost:3001/health || exit 1
      env:
        LECTIO_API_URL: http://localhost:3000/api/v1
        NODE_ENV: test
    
    - name: Run MCP tests
      working-directory: ./mcp-server
      run: npm test
      env:
        NODE_OPTIONS: '--experimental-vm-modules'
        LECTIO_API_URL: http://localhost:3000/api/v1
    
    - name: Test MCP tools via curl
      run: |
        # Test get_readings tool
        curl -X POST http://localhost:3001/rpc \
          -H "Content-Type: application/json" \
          -d '{
            "jsonrpc": "2.0",
            "id": "ci-test-1",
            "method": "tools/call",
            "params": {
              "name": "get_readings",
              "arguments": {
                "date": "2025-12-25",
                "tradition": "rcl"
              }
            }
          }' | jq '.result.content[0].text' | jq -r '.' | jq '.date' | grep "2025-12-25"
        
        # Test explore_calendar tool
        curl -X POST http://localhost:3001/rpc \
          -H "Content-Type: application/json" \
          -d '{
            "jsonrpc": "2.0",
            "id": "ci-test-2",
            "method": "tools/call",
            "params": {
              "name": "explore_calendar",
              "arguments": {
                "focus": "current",
                "tradition": "rcl"
              }
            }
          }' | jq '.result' | grep "content"
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-results
        path: |
          mcp-server/coverage/
          mcp-server/test-results/

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Build Docker image
      working-directory: ./mcp-server
      run: |
        docker build -t lectio-mcp:test .
        docker run --rm lectio-mcp:test --version