name: Deploy to DigitalOcean

on:
  push:
    branches:
      - main
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'production'
        type: choice
        options:
          - production
          - staging

env:
  REGISTRY: registry.digitalocean.com
  IMAGE_NAME: lectio-api

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run linter
        run: npm run lint || true

      - name: Run tests
        run: npm test || true

      - name: Build application
        run: npm run build

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install doctl
        uses: digitalocean/action-doctl@v2
        with:
          token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

      - name: Build container image
        run: docker build -t ${{ env.IMAGE_NAME }}:${{ github.sha }} .

      - name: Log in to DigitalOcean Container Registry
        run: doctl registry login --expiry-seconds 1200

      - name: Get registry name
        run: |
          REGISTRY_NAME=$(doctl registry get --format Name --no-header)
          echo "REGISTRY_NAME=$REGISTRY_NAME" >> $GITHUB_ENV

      - name: Tag image
        run: |
          docker tag ${{ env.IMAGE_NAME }}:${{ github.sha }} \
            ${{ env.REGISTRY }}/${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker tag ${{ env.IMAGE_NAME }}:${{ github.sha }} \
            ${{ env.REGISTRY }}/${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:latest

      - name: Push image to DigitalOcean Container Registry
        run: |
          docker push ${{ env.REGISTRY }}/${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ env.REGISTRY }}/${{ env.REGISTRY_NAME }}/${{ env.IMAGE_NAME }}:latest

      - name: Update app spec with new image
        run: |
          # Update the app.yaml with the new image tag
          sed -i "s|dockerfile_path: Dockerfile|image:\n      registry_type: DOCR\n      repository: ${{ env.IMAGE_NAME }}\n      tag: ${{ github.sha }}|g" app.yaml
          
          # Remove source_dir and github configuration since we're using pre-built image
          sed -i '/source_dir:/d' app.yaml
          sed -i '/github:/,+3d' app.yaml

      - name: Deploy to DigitalOcean App Platform
        run: |
          # Check if app exists
          if doctl apps list --format Name --no-header | grep -q "^lectio-api$"; then
            # Update existing app
            APP_ID=$(doctl apps list --format ID,Name --no-header | grep "lectio-api$" | awk '{print $1}')
            doctl apps update $APP_ID --spec app.yaml
            
            # Create deployment and wait
            doctl apps create-deployment $APP_ID --wait
          else
            # Create new app
            doctl apps create --spec app.yaml --wait
          fi

      - name: Get app URL
        id: app-url
        run: |
          APP_ID=$(doctl apps list --format ID,Name --no-header | grep "lectio-api$" | awk '{print $1}')
          APP_URL=$(doctl apps get $APP_ID --format DefaultIngress --no-header)
          echo "url=https://$APP_URL" >> $GITHUB_OUTPUT
          echo "App deployed to: https://$APP_URL"

      - name: Validate deployment
        run: |
          sleep 30  # Wait for app to stabilize
          curl -f ${{ steps.app-url.outputs.url }}/health || exit 1
          echo "Health check passed!"

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: 'âœ… Deployment successful! App URL: ${{ steps.app-url.outputs.url }}'
            })